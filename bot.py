import sqlite3
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
TOKEN = "7442233621:AAERkVTRXuglbgukr7VLT9QedoQWFsgj9dY"
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()
dp["pending_appointments"] = {}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("appointments.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute("""CREATE TABLE IF NOT EXISTS appointments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    phone TEXT,
                    email TEXT,
                    date TEXT,
                    time INTEGER)""")
conn.commit()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
dp["pending_appointments"] = {}

# –§—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Å–µ—Å—Å–∏—é")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è."
    )
    await message.answer(text, reply_markup=main_menu())

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å–æ–≤
def get_available_times(date):
    available_hours = range(16, 22)  # –í—Ä–µ–º—è —Å 16:00 –¥–æ 21:00
    free_hours = []

    for hour in available_hours:
        cursor.execute("SELECT * FROM appointments WHERE date = ? AND time = ?", (date, hour))
        if not cursor.fetchone():
            free_hours.append(hour)

    return free_hours

# –§—É–Ω–∫—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–∞—Å–∞–º–∏
def generate_time_keyboard(date):
    available_times = get_available_times(date)
    if not available_times:
        return None

    keyboard = [[InlineKeyboardButton(text=f"{hour}:00", callback_data=f"time_{date}_{hour}")] for hour in available_times]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–Ω—è–º–∏
def generate_date_keyboard():
    today = datetime.today()
    keyboard = []

    for i in range(7):
        date = (today + timedelta(days=i)).strftime('%Y-%m-%d')
        if get_available_times(date):
            formatted_date = (today + timedelta(days=i)).strftime("%d.%m (%a)")
            keyboard.append([InlineKeyboardButton(text=formatted_date, callback_data=f"date_{date}")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@dp.message(lambda message: message.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Å–µ—Å—Å–∏—é")
async def choose_date(message: types.Message):
    keyboard = generate_date_keyboard()
    if keyboard:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ù–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query(lambda callback: callback.data.startswith("date_"))
async def choose_time(callback: types.CallbackQuery):
    selected_date = callback.data.split("_")[1]
    keyboard = generate_time_keyboard(selected_date)

    if keyboard:
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
    else:
        await callback.message.edit_text("‚ùå –í —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                                         reply_markup=generate_date_keyboard())

# –§—É–Ω–∫—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞
def phone_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@dp.callback_query(lambda callback: callback.data.startswith("time_"))
async def confirm_appointment(callback: types.CallbackQuery):
    _, date, hour = callback.data.split("_")
    user_id = callback.from_user.id
    hour = int(hour)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    dp["pending_appointments"][user_id] = {"date": date, "time": hour}
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=phone_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(lambda message: message.contact)
async def get_email(message: types.Message):
    user_id = message.from_user.id
    phone_number = message.contact.phone_number

    if user_id not in dp["pending_appointments"]:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    dp["pending_appointments"][user_id]["phone"] = phone_number
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ email –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
@dp.message(lambda message: message.text)
async def finalize_appointment(message: types.Message):
    user_id = message.from_user.id
    email = message.text

    if user_id not in dp["pending_appointments"]:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    appointment = dp["pending_appointments"].pop(user_id)
    date, time, phone = appointment["date"], appointment["time"], appointment["phone"]

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO appointments (user_id, phone, email, date, time) VALUES (?, ?, ?, ?, ?)",
                   (user_id, phone, email, date, time))
    conn.commit()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ + –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    confirmation_text = (
        f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time}:00\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìß Email: {email}\n\n"
        f"üéØ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É Telegram-–∫–∞–Ω–∞–ª—É: [—Å—Å—ã–ª–∫–∞]"
    )
    await message.answer(confirmation_text, reply_markup=main_menu_keyboard())

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥—É
    admin_id = 1936828593  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
    await bot.send_message(admin_id, f"üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n{confirmation_text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message(lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: types.Message):
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
# –§—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Å–µ—Å—Å–∏—é")],
        [KeyboardButton(text="‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ")],
        [KeyboardButton(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –¢–ì –∫–∞–Ω–∞–ª")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ"
@dp.message(lambda message: message.text == "‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ")
async def about_psychologist(message: types.Message):
    text = (
        "üë©‚Äç‚öïÔ∏è –û –ø—Å–∏—Ö–æ–ª–æ–≥–µ:\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç [–ò–º—è], —è –¥–∏–ø–ª–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å [X] –ª–µ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã. "
        "–ü–æ–º–æ–≥–∞—é –ª—é–¥—è–º —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–∞–º–∏, —Å—Ç—Ä–µ—Å—Å–∞–º–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≥–∞—Ä–º–æ–Ω–∏—é. "
        "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!"
    )
    await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –¢–ì –∫–∞–Ω–∞–ª"
@dp.message(lambda message: message.text == "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –¢–ì –∫–∞–Ω–∞–ª")
async def go_to_channel(message: types.Message):
    channel_link = "https://t.me/YOUR_CHANNEL_LINK"  # –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    await message.answer(f"üì¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É Telegram-–∫–∞–Ω–∞–ª—É: [–ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞]({channel_link})", parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
